// <auto-generated />
using System;
using MQR.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MQR.DataAccess.Migrations
{
    [DbContext(typeof(MQRDbContext))]
    partial class MQRDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MQR.DataAccess.Entities.ActiveSession", b =>
                {
                    b.Property<string>("TopsAlternateName")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("LockTakenUtc")
                        .IsUnicode(false)
                        .HasColumnType("datetime");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RequestSessionRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TopsAlternateName");

                    b.HasIndex("RequestId")
                        .IsUnique()
                        .HasFilter("[RequestId] IS NOT NULL");

                    b.HasIndex("RequestSessionRequestId");

                    b.ToTable("ActiveSession", (string)null);
                });

            modelBuilder.Entity("MQR.DataAccess.Entities.LogonCredential", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LockLastTakenUtc")
                        .HasColumnType("datetime");

                    b.Property<bool>("LockedOut")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LockedOutDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PasswordChangedDateUtc")
                        .HasPrecision(0)
                        .HasColumnType("datetime");

                    b.Property<bool>("PasswordEncrypted")
                        .HasColumnType("bit");

                    b.Property<string>("Pool")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Identifier")
                        .IsUnique();

                    b.HasIndex("Pool");

                    b.ToTable("LogonCredentials", (string)null);
                });

            modelBuilder.Entity("MQR.DataAccess.Entities.ParsedOutput", b =>
                {
                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ParsedMainframeJson")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("RequestId");

                    b.ToTable("ParsedOutput", (string)null);
                });

            modelBuilder.Entity("MQR.DataAccess.Entities.RawOutput", b =>
                {
                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RawMainframeOutput")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("RequestId");

                    b.ToTable("RawOutput", (string)null);
                });

            modelBuilder.Entity("MQR.DataAccess.Entities.RequestSession", b =>
                {
                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientRequest")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ClientTrackingId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("SessionId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("RequestId");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("IX_RequestSession_SessionId_InProgress")
                        .HasFilter("[Status] = 'InProgress'");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("SessionId"), new[] { "RequestId" });

                    b.ToTable("RequestSession", (string)null);
                });

            modelBuilder.Entity("MQR.DataAccess.Entities.ActiveSession", b =>
                {
                    b.HasOne("MQR.DataAccess.Entities.RequestSession", null)
                        .WithOne("ActiveSession")
                        .HasForeignKey("MQR.DataAccess.Entities.ActiveSession", "RequestId");

                    b.HasOne("MQR.DataAccess.Entities.RequestSession", "RequestSession")
                        .WithMany()
                        .HasForeignKey("RequestSessionRequestId");

                    b.Navigation("RequestSession");
                });

            modelBuilder.Entity("MQR.DataAccess.Entities.ParsedOutput", b =>
                {
                    b.HasOne("MQR.DataAccess.Entities.RequestSession", null)
                        .WithOne("ParsedMainframeOutput")
                        .HasForeignKey("MQR.DataAccess.Entities.ParsedOutput", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MQR.DataAccess.Entities.RawOutput", b =>
                {
                    b.HasOne("MQR.DataAccess.Entities.RequestSession", null)
                        .WithOne("RawMainframeOutput")
                        .HasForeignKey("MQR.DataAccess.Entities.RawOutput", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MQR.DataAccess.Entities.RequestSession", b =>
                {
                    b.Navigation("ActiveSession");

                    b.Navigation("ParsedMainframeOutput");

                    b.Navigation("RawMainframeOutput");
                });
#pragma warning restore 612, 618
        }
    }
}
